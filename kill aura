if shared.settings and shared.settings._initialized then return end

shared.settings = {
    killaura = false,
    maxdistance = 30,
    debugging = true,
    attackspeed = 0.3,
    _initialized = true
}

-- Load GUI Library
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()
local Window = Library.CreateLib("KillAura Script", "DarkTheme")
local MainTab = Window:NewTab("KillAura")
local Section = MainTab:NewSection("Aura Controls")

Section:NewToggle("Toggle Kill Aura", "Turns Kill Aura On/Off", function(state)
    shared.settings.killaura = state
    if state then
        coroutine.wrap(StartKillAura)()
    end
end)

Section:NewSlider("Max Distance", "Aura Range", 100, 1, function(value)
    shared.settings.maxdistance = value
end)

Section:NewSlider("Attack Speed", "Delay between attacks", 1, 0.05, function(value)
    shared.settings.attackspeed = value
end)

Section:NewToggle("Debug Mode", "Print attack logs", function(state)
    shared.settings.debugging = state
end)

-- Services and player setup
local Players = game:GetService("Players")
local lp = Players.LocalPlayer

-- Helper functions
local function getchar(plr, yield)
    local p = plr or lp
    return p.Character or (yield and p.CharacterAdded:Wait())
end

local function gethumanoid(plr, yield)
    local char = getchar(plr, yield)
    return yield and char:WaitForChild("Humanoid") or char and char:FindFirstChildWhichIsA("Humanoid")
end

local function getDamageRemote()
    local char = getchar(nil, true)
    local tool = char and char:FindFirstChildWhichIsA("Tool")
    if not tool then return end

    local remote = tool:FindFirstChild("DamageRemote")
    if not remote then
        for _, v in pairs(tool:GetDescendants()) do
            if v:IsA("RemoteEvent") and (v.Name:lower():match("damage") or v.Name:lower():match("hit") or v.Name:lower():match("fire") or v.Name:lower():match("shoot")) then
                remote = v
                break
            end
        end
    end

    return remote
end

local function GetClosestPlayer()
    local closestPlayer = nil
    local shortestDistance = shared.settings.maxdistance

    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= lp then
            local char = getchar(player)
            local hum = gethumanoid(player)
            local part = char and char:FindFirstChild("HumanoidRootPart")

            if char and hum and part and hum.Health > 0 and not char:FindFirstChildWhichIsA("ForceField") then
                local distance = (lp.Character.HumanoidRootPart.Position - part.Position).Magnitude
                if distance <= shortestDistance then
                    closestPlayer = player
                    shortestDistance = distance
                end
            end
        end
    end

    return closestPlayer, shortestDistance
end

-- KillAura loop
function StartKillAura()
    while shared.settings.killaura do
        local success, err = pcall(function()
            local remote = getDamageRemote()
            local target, distance = GetClosestPlayer()

            if remote and target then
                local hum = gethumanoid(target)
                if hum then
                    remote:FireServer(hum)

                    if shared.settings.debugging then
                        warn("[Aura] Hit:", target.Name, "| Distance:", math.floor(distance))
                    end
                end
            end
        end)

        if not success and shared.settings.debugging then
            warn("[Aura Error]", err)
        end

        task.wait(shared.settings.attackspeed)
    end
end
